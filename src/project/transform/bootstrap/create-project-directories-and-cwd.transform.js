/*
Created by Franz Zemen 2/3/2023
License Type: MIT
*/
import { Pipeline } from '../../pipeline/core/pipeline.js';
import { ChangeWorkingDirectory } from '../core/change-working-directory.transform.js';
import { CreateDirectory } from '../core/create-directory.transform.js';
import { BootstrapTransform } from './bootstrap-transform.js';
/**
 * Creates project directories, if they don't exist, applying bootstrap rules that impact which directories actually should be created.
 *
 * Does not create project directories if they already exist.
 *
 * Warns of project directories that should not exist under bootstrap options, but are found to be there.
 */
export class CreateProjectDirectoriesAndCwd extends BootstrapTransform {
    constructor(logDepth) {
        super(logDepth);
    }
    executeBootstrapImpl(bootstrapOptions) {
        const directories = bootstrapOptions.directories;
        const parallelWork = [];
        let createDirectoryTransforms = [];
        let key;
        for (key in directories) {
            if (key == 'root')
                continue;
            if (!directories[key].autogenerated) {
                parallelWork.push({ directory: directories[key], errorOnExists: false });
                createDirectoryTransforms.push(CreateDirectory);
            }
        }
        return Pipeline
            .options({ name: 'Create project directories', logDepth: this.depth + 1 })
            .transform(CreateDirectory, { directory: directories.root, errorOnExists: true })
            .parallels(createDirectoryTransforms, ['asPipedIn'], parallelWork)
            .transform(ChangeWorkingDirectory)
            .execute(directories.root.directoryPath)
            .then(() => { return; });
    }
    transformContext(payload) {
        return '';
    }
}
