/*
Created by Franz Zemen 12/03/2022
License Type: MIT
*/

import {ValidationSchema} from 'fastest-validator';
import doc = Mocha.reporters.doc;

export type DirectoryPath =
/*
'.git'
| 'node_modules'
*/
  | '.dual-build'
  | '.dual-build/logs'

| '.dual-build/options'

  /*
| '.dual-build/packages'
*/
| '.dual-build/tsconfigs'
  /*
| 'bin'
| 'src'
| 'src/bin-command'
| 'test'
| 'assets'
| 'data'

 */
  | 'out'
  | 'out/dist'
  | 'out/dist/types'
  | 'out/dist/esm'
  | 'out/dist/cjs'
  | 'out/dist/bin'
  /*
  | 'transient/testing'
  | 'transient/testing/esm'
  | 'transient/testing/commonjs'*/
  | 'doc'
  | 'doc/project';

export enum ProjectDirectoryName {
  git             = '.git',
  node_modules    = 'node_modules',
  dualBuild       = '.dual-build folder for defaults and overrides',
  dualBuildlogs   = 'logs generated by dual-build',
  options         = 'dual build options',
  packages        = 'packages',
  tsconfigs       = 'tsconfigs',
  src             = 'root for all all source projects (main distribution and others',
  srcBinCommand   = 'bin-command',
  test            = 'test',
  bin             = 'bin',
  assets          = 'assets',
  data            = 'data',
  out             = 'out',
  build           = 'build',
  buildEsm        = 'esm',
  buildCommonJS   = 'commonjs',
  dist            = 'main project distribution',
  distTypes       = 'types for main project distribution',
  distEsm         = 'esm code for main project distribution',
  distCjs         = 'cjs code for main project distribution',
  distBin         = 'bin code for main  project distribution',
  testing         = 'testing',
  testingEsm      = 'esm',
  testingCommonJS = 'commonjs',
  doc             = 'documentation root',
  docProject      = 'documentation root for main project',
  notDefined      = 'FOLDER_NOT_DEFINED'

}

export type DirectoryName = ProjectDirectoryName | string;

export type Directory = {
  directoryPath: DirectoryPath | string | 'NOT_DEFINED';
  name: DirectoryName;
  // Deletable (
  transient: boolean;
  autogenerated: boolean;
};

export type Directories = {
  [key in DirectoryPath | 'root']: Directory;
};

export const defaultDirectories: Directories = {
  'root': {
    // This is set on a per-invocation basis
    directoryPath: 'NOT_DEFINED',
    name: ProjectDirectoryName.notDefined,
    transient: false,
    autogenerated: false
  },
  /*
  '.git': {
    directoryPath: './.git',
    name: ProjectDirectoryName.git,
    transient: false,
    autogenerated: true
  },
  'node_modules': {
    directoryPath: './node_modules',
    name: ProjectDirectoryName.node_modules,
    transient: false,
    autogenerated: true
  },
  'assets': {
    directoryPath: './assets',
    name: ProjectDirectoryName.assets,
    transient: false,
    autogenerated: false
  },
  'data': {
    directoryPath: './data',
    name: ProjectDirectoryName.data,
    transient: false,
    autogenerated: false
  },

   */
  '.dual-build': {
    directoryPath: './.dual-build',
    name: ProjectDirectoryName.dualBuild,
    transient: false,
    autogenerated: true
  },
  '.dual-build/logs': {
    directoryPath: './.dual-build/logs',
    name: ProjectDirectoryName.dualBuildlogs,
    transient: false,
    autogenerated: false
  },

  '.dual-build/options': {
    directoryPath: './.dual-build/options',
    name: ProjectDirectoryName.options,
    transient: false,
    autogenerated: false
  },
  /*
  '.dual-build/packages': {
    directoryPath: './.dual-build/packages',
    name: ProjectDirectoryName.packages,
    transient: false,
    autogenerated: false
  },*/
  '.dual-build/tsconfigs': {
    directoryPath: './.dual-build/tsconfigs',
    name: ProjectDirectoryName.tsconfigs,
    transient: false,
    autogenerated: false
  },/*
  'src': {
    directoryPath: './src',
    name: ProjectDirectoryName.src,
    transient: false,
    autogenerated: true
  },
  'src/bin-command': {
    directoryPath: './src/bin-command',
    name: ProjectDirectoryName.srcBinCommand,
    transient: false,
    autogenerated: false
  },
  'test': {
    directoryPath: './test',  // Actual location of test folder depends on test strategy
    name: ProjectDirectoryName.test,
    transient: false,
    autogenerated: false
  },
  'bin': {
    directoryPath: './bin',
    name: ProjectDirectoryName.bin,
    transient: false,
    autogenerated: false
  },

   */
  'out': {
    directoryPath: './out',
    name: ProjectDirectoryName.out,
    transient: true,
    autogenerated: true
  },
  'out/dist': {
    directoryPath: './out/dist',
    name: ProjectDirectoryName.dist,
    transient: true,
    autogenerated: true
  },
  'out/dist/bin': {
    directoryPath: './out/dist/bin',
    name: ProjectDirectoryName.distBin,
    transient: true,
    autogenerated: true
  },
  'out/dist/types': {
    directoryPath: './out/dist/types',
    name: ProjectDirectoryName.distTypes,
    transient: true,
    autogenerated: true
  },
  'out/dist/esm': {
    directoryPath: './out/dist/esm',
    name: ProjectDirectoryName.distEsm,
    transient: true,
    autogenerated: true
  },
  'out/dist/cjs': {
    directoryPath: './out/dist/cjs',
    name: ProjectDirectoryName.distCjs,
    transient: true,
    autogenerated: true
  },
  /*
  'transient/testing': {
    directoryPath: './transient/testing',
    name: ProjectDirectoryName.testing,
    transient: true,
    autogenerated: true
  },
  'transient/testing/esm': {
    directoryPath: './transient/testing/esm',
    name: ProjectDirectoryName.testingEsm,
    transient: true,
    autogenerated: true
  },
  'transient/testing/commonjs': {
    directoryPath: './transient/testing/commonjs',
    name: ProjectDirectoryName.testingCommonJS,
    transient: true,
    autogenerated: true
  }

   */

  'doc': {
    directoryPath: './doc',
    name: ProjectDirectoryName.doc,
    transient: false,
    autogenerated: true
  },
  'doc/project': {
    directoryPath: './doc/project',
    name: ProjectDirectoryName.docProject,
    transient: false,
    autogenerated: true
  }
};

export type ContainsDirectories = {
  directories: Directories;
} | undefined;

export type ContainsRoot = {
  'root': Directory;
} | undefined;


export function isDirectory(dir: any | Directory): dir is Directory {
  return 'directoryPath' in dir && 'folder' in dir && 'transient' in dir;
}


export const directoriesSchema: ValidationSchema = {
  root: {type: 'string', optional: true}
};

export const directoriesWrappedSchema: ValidationSchema = {
  $$strict: false,
  type: 'object',
  props: directoriesSchema
};
