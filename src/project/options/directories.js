"use strict";
/*
Created by Franz Zemen 12/03/2022
License Type: MIT
*/
exports.__esModule = true;
exports.directoriesWrappedSchema = exports.directoriesSchema = exports.isDirectory = exports.defaultDirectories = exports.ProjectDirectoryName = void 0;
var ProjectDirectoryName;
(function (ProjectDirectoryName) {
    ProjectDirectoryName["git"] = ".git";
    ProjectDirectoryName["node_modules"] = "node_modules";
    ProjectDirectoryName["dualBuild"] = ".dual-build";
    ProjectDirectoryName["logs"] = "logs";
    ProjectDirectoryName["options"] = "options";
    ProjectDirectoryName["packages"] = "packages";
    ProjectDirectoryName["tsconfigs"] = "tsconfigs";
    ProjectDirectoryName["src"] = "src";
    ProjectDirectoryName["srcBinCommand"] = "bin-command";
    ProjectDirectoryName["test"] = "test";
    ProjectDirectoryName["bin"] = "bin";
    ProjectDirectoryName["assets"] = "assets";
    ProjectDirectoryName["data"] = "data";
    ProjectDirectoryName["out"] = "out";
    ProjectDirectoryName["build"] = "build";
    ProjectDirectoryName["buildEsm"] = "esm";
    ProjectDirectoryName["buildCommonJS"] = "commonjs";
    ProjectDirectoryName["dist"] = "dist";
    ProjectDirectoryName["distTypes"] = "types";
    ProjectDirectoryName["distEsm"] = "esm";
    ProjectDirectoryName["distCjs"] = "cjs";
    ProjectDirectoryName["distBin"] = "bin";
    ProjectDirectoryName["testing"] = "testing";
    ProjectDirectoryName["testingEsm"] = "esm";
    ProjectDirectoryName["testingCommonJS"] = "commonjs";
    ProjectDirectoryName["notDefined"] = "FOLDER_NOT_DEFINED";
})(ProjectDirectoryName = exports.ProjectDirectoryName || (exports.ProjectDirectoryName = {}));
exports.defaultDirectories = {
    'root': {
        // This is set on a per-invocation basis
        directoryPath: 'NOT_DEFINED',
        name: ProjectDirectoryName.notDefined,
        transient: false,
        autogenerated: false
    },
    /*
    '.git': {
      directoryPath: './.git',
      name: ProjectDirectoryName.git,
      transient: false,
      autogenerated: true
    },
    'node_modules': {
      directoryPath: './node_modules',
      name: ProjectDirectoryName.node_modules,
      transient: false,
      autogenerated: true
    },
    'assets': {
      directoryPath: './assets',
      name: ProjectDirectoryName.assets,
      transient: false,
      autogenerated: false
    },
    'data': {
      directoryPath: './data',
      name: ProjectDirectoryName.data,
      transient: false,
      autogenerated: false
    },
    '.dual-build': {
      directoryPath: './.dual-build',
      name: ProjectDirectoryName.dualBuild,
      transient: false,
      autogenerated: true
    },
    '.dual-build/logs': {
      directoryPath: './.dual-build/logs',
      name: ProjectDirectoryName.logs,
      transient: false,
      autogenerated: false
    },
    '.dual-build/options': {
      directoryPath: './.dual-build/options',
      name: ProjectDirectoryName.options,
      transient: false,
      autogenerated: false
    },
    '.dual-build/packages': {
      directoryPath: './.dual-build/packages',
      name: ProjectDirectoryName.packages,
      transient: false,
      autogenerated: false
    },
    '.dual-build/tsconfigs': {
      directoryPath: './.dual-build/tsconfigs',
      name: ProjectDirectoryName.tsconfigs,
      transient: false,
      autogenerated: false
    },
    'src': {
      directoryPath: './src',
      name: ProjectDirectoryName.src,
      transient: false,
      autogenerated: true
    },
    'src/bin-command': {
      directoryPath: './src/bin-command',
      name: ProjectDirectoryName.srcBinCommand,
      transient: false,
      autogenerated: false
    },
    'test': {
      directoryPath: './test',  // Actual location of test folder depends on test strategy
      name: ProjectDirectoryName.test,
      transient: false,
      autogenerated: false
    },
    'bin': {
      directoryPath: './bin',
      name: ProjectDirectoryName.bin,
      transient: false,
      autogenerated: false
    },
    
     */
    'out': {
        directoryPath: './out',
        name: ProjectDirectoryName.out,
        transient: true,
        autogenerated: true
    },
    'out/dist': {
        directoryPath: './out/dist',
        name: ProjectDirectoryName.dist,
        transient: true,
        autogenerated: true
    },
    'out/dist/bin': {
        directoryPath: './out/dist/bin',
        name: ProjectDirectoryName.distBin,
        transient: true,
        autogenerated: true
    },
    'out/dist/types': {
        directoryPath: './out/dist/types',
        name: ProjectDirectoryName.distTypes,
        transient: true,
        autogenerated: true
    },
    'out/dist/esm': {
        directoryPath: './out/dist/esm',
        name: ProjectDirectoryName.distEsm,
        transient: true,
        autogenerated: true
    },
    'out/dist/cjs': {
        directoryPath: './out/dist/cjs',
        name: ProjectDirectoryName.distCjs,
        transient: true,
        autogenerated: true
    }
    /*
    'transient/testing': {
      directoryPath: './transient/testing',
      name: ProjectDirectoryName.testing,
      transient: true,
      autogenerated: true
    },
    'transient/testing/esm': {
      directoryPath: './transient/testing/esm',
      name: ProjectDirectoryName.testingEsm,
      transient: true,
      autogenerated: true
    },
    'transient/testing/commonjs': {
      directoryPath: './transient/testing/commonjs',
      name: ProjectDirectoryName.testingCommonJS,
      transient: true,
      autogenerated: true
    }
    
     */
};
function isDirectory(dir) {
    return 'directoryPath' in dir && 'folder' in dir && 'transient' in dir;
}
exports.isDirectory = isDirectory;
exports.directoriesSchema = {
    root: { type: 'string', optional: true }
};
exports.directoriesWrappedSchema = {
    $$strict: false,
    type: 'object',
    props: exports.directoriesSchema
};
