/*
Created by Franz Zemen 12/03/2022
License Type: MIT
*/
export var ProjectDirectoryName;
(function (ProjectDirectoryName) {
    ProjectDirectoryName["git"] = ".git";
    ProjectDirectoryName["node_modules"] = "node_modules";
    ProjectDirectoryName["dualBuild"] = ".dual-build";
    ProjectDirectoryName["logs"] = "logs";
    ProjectDirectoryName["options"] = "options";
    ProjectDirectoryName["packages"] = "packages";
    ProjectDirectoryName["tsconfigs"] = "tsconfigs";
    ProjectDirectoryName["src"] = "src";
    ProjectDirectoryName["srcBinCommand"] = "bin-command";
    ProjectDirectoryName["test"] = "test";
    ProjectDirectoryName["bin"] = "bin";
    ProjectDirectoryName["assets"] = "assets";
    ProjectDirectoryName["data"] = "data";
    ProjectDirectoryName["transient"] = "transient";
    ProjectDirectoryName["build"] = "build";
    ProjectDirectoryName["buildEsm"] = "esm";
    ProjectDirectoryName["buildCommonJS"] = "commonjs";
    ProjectDirectoryName["publish"] = "publish";
    ProjectDirectoryName["publishEsm"] = "esm";
    ProjectDirectoryName["publishCommonJS"] = "commonjs";
    ProjectDirectoryName["publishBin"] = "bin";
    ProjectDirectoryName["testing"] = "testing";
    ProjectDirectoryName["testingEsm"] = "esm";
    ProjectDirectoryName["testingCommonJS"] = "commonjs";
    ProjectDirectoryName["notDefined"] = "FOLDER_NOT_DEFINED";
})(ProjectDirectoryName = ProjectDirectoryName || (ProjectDirectoryName = {}));
export const directories = {
    'root': {
        // This is set on a per-invocation basis
        directoryPath: 'NOT_DEFINED',
        name: ProjectDirectoryName.notDefined,
        transient: false,
        autogenerated: false,
    },
    '.git': {
        directoryPath: './.git',
        name: ProjectDirectoryName.git,
        transient: false,
        autogenerated: true
    },
    'node_modules': {
        directoryPath: './node_modules',
        name: ProjectDirectoryName.node_modules,
        transient: false,
        autogenerated: true
    },
    'assets': {
        directoryPath: './assets',
        name: ProjectDirectoryName.assets,
        transient: false,
        autogenerated: false
    },
    'data': {
        directoryPath: './data',
        name: ProjectDirectoryName.data,
        transient: false,
        autogenerated: false
    },
    '.dual-build': {
        directoryPath: './.dual-build',
        name: ProjectDirectoryName.dualBuild,
        transient: false,
        autogenerated: true
    },
    '.dual-build/logs': {
        directoryPath: './.dual-build/logs',
        name: ProjectDirectoryName.logs,
        transient: false,
        autogenerated: false
    },
    '.dual-build/options': {
        directoryPath: './.dual-build/options',
        name: ProjectDirectoryName.options,
        transient: false,
        autogenerated: false
    },
    '.dual-build/packages': {
        directoryPath: './.dual-build/packages',
        name: ProjectDirectoryName.packages,
        transient: false,
        autogenerated: false
    },
    '.dual-build/tsconfigs': {
        directoryPath: './.dual-build/tsconfigs',
        name: ProjectDirectoryName.tsconfigs,
        transient: false,
        autogenerated: false
    },
    'src': {
        directoryPath: './src',
        name: ProjectDirectoryName.src,
        transient: false,
        autogenerated: true
    },
    'src/bin-command': {
        directoryPath: './src/bin-command',
        name: ProjectDirectoryName.srcBinCommand,
        transient: false,
        autogenerated: false
    },
    'test': {
        directoryPath: './test',
        name: ProjectDirectoryName.test,
        transient: false,
        autogenerated: false
    },
    'bin': {
        directoryPath: './bin',
        name: ProjectDirectoryName.bin,
        transient: false,
        autogenerated: false
    },
    'transient': {
        directoryPath: './transient',
        name: ProjectDirectoryName.transient,
        transient: true,
        autogenerated: true
    },
    'transient/build': {
        directoryPath: './transient/build',
        name: ProjectDirectoryName.build,
        transient: true,
        autogenerated: true
    },
    'transient/build/esm': {
        directoryPath: './transient/build/esm',
        name: ProjectDirectoryName.buildEsm,
        transient: true,
        autogenerated: true
    },
    'transient/build/commonjs': {
        directoryPath: './transient/build/commonjs',
        name: ProjectDirectoryName.buildCommonJS,
        transient: true,
        autogenerated: true
    },
    'transient/publish': {
        directoryPath: './transient/publish',
        name: ProjectDirectoryName.publish,
        transient: true,
        autogenerated: true
    },
    'transient/publish/bin': {
        directoryPath: './transient/publish/bin',
        name: ProjectDirectoryName.publishBin,
        transient: true,
        autogenerated: true
    },
    'transient/publish/esm': {
        directoryPath: './transient/publish/esm',
        name: ProjectDirectoryName.publishEsm,
        transient: true,
        autogenerated: true
    },
    'transient/publish/commonjs': {
        directoryPath: './transient/publish/commonjs',
        name: ProjectDirectoryName.publishCommonJS,
        transient: true,
        autogenerated: true
    },
    'transient/testing': {
        directoryPath: './transient/testing',
        name: ProjectDirectoryName.testing,
        transient: true,
        autogenerated: true
    },
    'transient/testing/esm': {
        directoryPath: './transient/testing/esm',
        name: ProjectDirectoryName.testingEsm,
        transient: true,
        autogenerated: true
    },
    'transient/testing/commonjs': {
        directoryPath: './transient/testing/commonjs',
        name: ProjectDirectoryName.testingCommonJS,
        transient: true,
        autogenerated: true
    }
};
export function isDirectory(dir) {
    return 'directoryPath' in dir && 'folder' in dir && 'transient' in dir;
}
export const directoriesSchema = {
    root: { type: 'string', optional: true }
};
export const directoriesWrappedSchema = {
    $$strict: false,
    type: 'object',
    props: directoriesSchema
};
